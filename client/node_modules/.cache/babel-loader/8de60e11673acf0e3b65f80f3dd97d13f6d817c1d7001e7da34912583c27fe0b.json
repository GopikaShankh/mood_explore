{"ast":null,"code":"var _jsxFileName = \"/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [latestMood, setLatestMood] = useState(null);\n\n  // Fetch the latest mood from the backend\n  const fetchLatestMood = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000\");\n      if (response.data.length > 0) {\n        setLatestMood(response.data[0]); // Assuming moods are sorted by creation date (latest first)\n      }\n    } catch (error) {\n      console.error(\"Error fetching latest mood:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchLatestMood();\n  }, []);\n\n  // Add a new mood\n  const addMood = async mood => {\n    try {\n      const response = await axios.post(\"http://localhost:5000\", mood);\n      setLatestMood(response.data); // Update the latest mood\n    } catch (error) {\n      console.error(\"Error adding mood:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoodForm, {\n      onAddMood: addMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), latestMood ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: moods.map(mood => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Mood: \", mood.mood]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Message: \", mood.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", new Date(mood.date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Suggestions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mood.suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: suggestion\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 34\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onDeleteMood(mood._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 26\n        }, this)]\n      }, mood._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 22\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No moods added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/history\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"View Mood History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"Wn5g/QyvlYkPqDZOPdvw5aomNjU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","Link","jsxDEV","_jsxDEV","Dashboard","_s","latestMood","setLatestMood","fetchLatestMood","response","get","data","length","error","console","addMood","mood","post","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddMood","moods","map","message","Date","date","toLocaleString","suggestions","suggestion","index","onClick","onDeleteMood","_id","to","_c","$RefreshReg$"],"sources":["/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\n\nconst Dashboard = () => {\n    const [latestMood, setLatestMood] = useState(null);\n\n    // Fetch the latest mood from the backend\n    const fetchLatestMood = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:5000\");\n            if (response.data.length > 0) {\n                setLatestMood(response.data[0]); // Assuming moods are sorted by creation date (latest first)\n            }\n        } catch (error) {\n            console.error(\"Error fetching latest mood:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchLatestMood();\n    }, []);\n\n    // Add a new mood\n    const addMood = async (mood) => {\n        try {\n            const response = await axios.post(\"http://localhost:5000\", mood);\n            setLatestMood(response.data); // Update the latest mood\n        } catch (error) {\n            console.error(\"Error adding mood:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Dashboard</h1>\n            <MoodForm onAddMood={addMood} />\n            {latestMood ? (\n                 <ul>\n                 {moods.map((mood) => (\n                     <li key={mood._id}>\n                         <h3>Mood: {mood.mood}</h3>\n                         <p>Message: {mood.message}</p>\n                         <p>Date: {new Date(mood.date).toLocaleString()}</p>\n                         <h4>Suggestions:</h4>\n                         <ul>\n                             {mood.suggestions.map((suggestion, index) => (\n                                 <li key={index}>{suggestion}</li>\n                             ))}\n                         </ul>\n                         <button onClick={() => onDeleteMood(mood._id)}>Delete</button>\n                     </li>\n\n                 ))}\n             </ul>\n            ) : (\n                <p>No moods added yet.</p>\n            )}\n            <Link to=\"/history\">\n                <button>View Mood History</button>\n            </Link>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}