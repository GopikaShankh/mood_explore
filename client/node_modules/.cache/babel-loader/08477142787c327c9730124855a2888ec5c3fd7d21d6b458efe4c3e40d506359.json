{"ast":null,"code":"var _jsxFileName = \"/home/navgurukul/Pictures/mood-explore/client/src/components/History.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst History = () => {\n  _s();\n  const [moods, setMoods] = useState([]);\n\n  // Fetch moods from the backend\n  const fetchMoods = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n      const response = await axios.get(`http://localhost:8080/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setMoods(response.data);\n    } catch (error) {\n      console.error(\"Error fetching moods:\", error);\n    }\n  };\n  // Delete a mood\n  const deleteMood = async id => {\n    try {\n      await axios.delete(`http://localhost:8080/${id}`);\n      setMoods(moods.filter(mood => mood._id !== id));\n    } catch (error) {\n      console.error(\"Error deleting mood:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchMoods();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mood History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), moods.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: moods.map(mood => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Mood: \", mood.mood]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Message: \", mood.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", new Date(mood.date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Suggestions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mood.suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: suggestion\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteMood(mood._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }, this)]\n      }, mood._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No moods available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n_s(History, \"JVKzjhX8h3SP8t7rweTnWo8V/R0=\");\n_c = History;\nexport default History;\nvar _c;\n$RefreshReg$(_c, \"History\");","map":{"version":3,"names":["React","useState","useEffect","axios","Navbar","jsxDEV","_jsxDEV","History","_s","moods","setMoods","fetchMoods","token","localStorage","getItem","decodedToken","jwtDecode","userId","id","response","get","headers","Authorization","data","error","console","deleteMood","delete","filter","mood","_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","message","Date","date","toLocaleString","suggestions","suggestion","index","onClick","_c","$RefreshReg$"],"sources":["/home/navgurukul/Pictures/mood-explore/client/src/components/History.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Navbar from \"./navbar\";\n\n\nconst History = () => {\n    const [moods, setMoods] = useState([]);\n\n    // Fetch moods from the backend\n    const fetchMoods = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n\n\n        try {\n            const decodedToken = jwtDecode(token);\n            const userId = decodedToken.id;\n            const response = await axios.get(`http://localhost:8080/${userId}`, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            setMoods(response.data);\n        } catch (error) {\n            console.error(\"Error fetching moods:\", error);\n        }\n    };\n    // Delete a mood\n    const deleteMood = async (id) => {\n        try {\n            await axios.delete(`http://localhost:8080/${id}`);\n            setMoods(moods.filter((mood) => mood._id !== id));\n        } catch (error) {\n            console.error(\"Error deleting mood:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchMoods();\n    }, []);\n\n    return (\n        <div className=\"bg\">\n            <Navbar />\n            <h1>Mood History</h1>\n            {moods.length > 0 ? (\n                <ul>\n                    {moods.map((mood) => (\n                        <li key={mood._id}>\n                            <h3>Mood: {mood.mood}</h3>\n                            <p>Message: {mood.message}</p>\n                            <p>Date: {new Date(mood.date).toLocaleString()}</p>\n                            <h4>Suggestions:</h4>\n                            <ul>\n                                {mood.suggestions.map((suggestion, index) => (\n                                    <li key={index}>{suggestion}</li>\n                                ))}\n                            </ul>\n                            <button onClick={() => deleteMood(mood._id)}>Delete</button>\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p>No moods available.</p>\n            )}\n        </div>\n    );\n};\n\nexport default History;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}