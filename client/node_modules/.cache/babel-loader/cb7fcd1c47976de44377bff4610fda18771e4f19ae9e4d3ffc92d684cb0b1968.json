{"ast":null,"code":"var _jsxFileName = \"/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [latestMood, setLatestMood] = useState(null);\n\n  // Fetch the latest mood from the backend\n  const fetchLatestMood = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000\");\n      if (response.data.length > 0) {\n        setLatestMood(response.data[0]); // Assuming moods are sorted by creation date (latest first)\n      }\n    } catch (error) {\n      console.error(\"Error fetching latest mood:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchLatestMood();\n  }, []);\n\n  // Add a new mood\n  const addMood = async mood => {\n    try {\n      const response = await axios.post(\"http://localhost:5000\", mood);\n      setLatestMood(response.data); // Update the latest mood\n    } catch (error) {\n      console.error(\"Error adding mood:\", error);\n    }\n  };\n  const deleteMood = async id => {\n    try {\n      await axios.delete(`http://localhost:5000/${id}`);\n      setMoods(moods.filter(mood => mood._id !== id));\n    } catch (error) {\n      console.error(\"Error deleting mood:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoodForm, {\n      onAddMood: addMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), latestMood ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Mood: \", latestMood.mood]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Message: \", latestMood.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Date: \", new Date(latestMood.date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Suggestions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: latestMood.suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: suggestion\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteMood(latestMood._id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, latestMood._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No moods added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/history\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"View Mood History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"Wn5g/QyvlYkPqDZOPdvw5aomNjU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","Link","jsxDEV","_jsxDEV","Dashboard","_s","latestMood","setLatestMood","fetchLatestMood","response","get","data","length","error","console","addMood","mood","post","deleteMood","id","delete","setMoods","moods","filter","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddMood","message","Date","date","toLocaleString","suggestions","map","suggestion","index","onClick","to","_c","$RefreshReg$"],"sources":["/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\n\nconst Dashboard = () => {\n    const [latestMood, setLatestMood] = useState(null);\n\n    // Fetch the latest mood from the backend\n    const fetchLatestMood = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:5000\");\n            if (response.data.length > 0) {\n                setLatestMood(response.data[0]); // Assuming moods are sorted by creation date (latest first)\n            }\n        } catch (error) {\n            console.error(\"Error fetching latest mood:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchLatestMood();\n    }, []);\n\n    // Add a new mood\n    const addMood = async (mood) => {\n        try {\n            const response = await axios.post(\"http://localhost:5000\", mood);\n            setLatestMood(response.data); // Update the latest mood\n        } catch (error) {\n            console.error(\"Error adding mood:\", error);\n        }\n    };\n\n    const deleteMood = async (id) => {\n        try {\n            await axios.delete(`http://localhost:5000/${id}`);\n            setMoods(moods.filter((mood) => mood._id !== id));\n        } catch (error) {\n            console.error(\"Error deleting mood:\", error);\n        }\n    };\n\n\n    return (\n        <div>\n            <h1>Dashboard</h1>\n            <MoodForm onAddMood={addMood} />\n            {latestMood ? (\n                <ul>\n                <li key={latestMood._id}>\n                    <h3>Mood: {latestMood.mood}</h3>\n                    <p>Message: {latestMood.message}</p>\n                    <p>Date: {new Date(latestMood.date).toLocaleString()}</p>\n                    <h4>Suggestions:</h4>\n                    <ul>\n                        {latestMood.suggestions.map((suggestion, index) => (\n                            <li key={index}>{suggestion}</li>\n                        ))}\n                    </ul>\n                    <button onClick={() => deleteMood(latestMood._id)}>Delete</button>\n                </li>\n            </ul>\n            ) : (\n                <p>No moods added yet.</p>\n            )}\n            <Link to=\"/history\">\n                <button>View Mood History</button>\n            </Link>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}