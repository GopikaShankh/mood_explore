{"ast":null,"code":"var _jsxFileName = \"/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport MoodList from \"./MoodList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // const [moods, setMoods] = useState([]);\n  const [moods, setMoods] = useState([]); // Initialize with an empty list\n  const [feeling, setFeeling] = useState(\"\");\n  const addMood = () => {\n    const newMood = {\n      feeling,\n      id: Date.now(),\n      suggestions: [\"Sample suggestion\"]\n    };\n    setMoods([newMood, ...moods]); // Update the mood list dynamically\n    setFeeling(\"\"); // Clear the input field\n  };\n\n  // Fetch moods from the backend\n\n  const fetchMoods = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000\");\n      setMoods(response.data);\n    } catch (error) {\n      console.error(\"Error fetching moods:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchMoods();\n  }, []);\n\n  // Delete a mood\n  const deleteMood = async id => {\n    try {\n      await axios.delete(`http://localhost:5000/${id}`);\n      setMoods(moods.filter(mood => mood._id !== id));\n    } catch (error) {\n      console.error(\"Error deleting mood:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoodForm, {\n      onAddMood: addMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoodList, {\n      moods: moods,\n      onDeleteMood: deleteMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"eadvJVf2ODnsjq+mwclTl2j3iiA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","MoodList","jsxDEV","_jsxDEV","Dashboard","_s","moods","setMoods","feeling","setFeeling","addMood","newMood","id","Date","now","suggestions","fetchMoods","response","get","data","error","console","deleteMood","delete","filter","mood","_id","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddMood","onDeleteMood","_c","$RefreshReg$"],"sources":["/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport MoodList from \"./MoodList\";\n\nconst Dashboard = () => {\n   // const [moods, setMoods] = useState([]);\n    const [moods, setMoods] = useState([]); // Initialize with an empty list\n  const [feeling, setFeeling] = useState(\"\");\n\n  const addMood = () => {\n    const newMood = { feeling, id: Date.now(), suggestions: [\"Sample suggestion\"] };\n    setMoods([newMood, ...moods]); // Update the mood list dynamically\n    setFeeling(\"\"); // Clear the input field\n  };\n\n    // Fetch moods from the backend\n\n    const fetchMoods = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:5000\");\n            setMoods(response.data);\n        } catch (error) {\n            console.error(\"Error fetching moods:\", error);\n        }\n    };\n    useEffect(() => {\n        fetchMoods();\n    }, []);\n\n\n\n\n    // Delete a mood\n    const deleteMood = async (id) => {\n        try {\n            await axios.delete(`http://localhost:5000/${id}`);\n            setMoods(moods.filter((mood) => mood._id !== id));\n        } catch (error) {\n            console.error(\"Error deleting mood:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Dashboard</h1>\n            <MoodForm onAddMood={addMood} />\n            <MoodList moods={moods} onDeleteMood={deleteMood} />\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB;EACC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMa,OAAO,GAAGA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAG;MAAEH,OAAO;MAAEI,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEC,WAAW,EAAE,CAAC,mBAAmB;IAAE,CAAC;IAC/ER,QAAQ,CAAC,CAACI,OAAO,EAAE,GAAGL,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/BG,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB,CAAC;;EAEC;;EAEA,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAG,CAAC,uBAAuB,CAAC;MACzDX,QAAQ,CAACU,QAAQ,CAACE,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IACjD;EACJ,CAAC;EACDtB,SAAS,CAAC,MAAM;IACZkB,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAKN;EACA,MAAMM,UAAU,GAAG,MAAOV,EAAE,IAAK;IAC7B,IAAI;MACA,MAAMb,KAAK,CAACwB,MAAM,CAAC,yBAAyBX,EAAE,EAAE,CAAC;MACjDL,QAAQ,CAACD,KAAK,CAACkB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,GAAG,KAAKd,EAAE,CAAC,CAAC;IACrD,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED,oBACIjB,OAAA;IAAAwB,QAAA,gBACIxB,OAAA;MAAAwB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB5B,OAAA,CAACH,QAAQ;MAACgC,SAAS,EAAEtB;IAAQ;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChC5B,OAAA,CAACF,QAAQ;MAACK,KAAK,EAAEA,KAAM;MAAC2B,YAAY,EAAEX;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEd,CAAC;AAAC1B,EAAA,CA7CID,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AA+Cf,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}