{"ast":null,"code":"var _jsxFileName = \"/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [latestMood, setLatestMood] = useState(null);\n\n  // Fetch the latest mood from the backend\n  const fetchLatestMood = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000\");\n      if (response.data.length > 0) {\n        setLatestMood(response.data[0]); // Assuming moods are sorted by creation date (latest first)\n      }\n    } catch (error) {\n      console.error(\"Error fetching latest mood:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchLatestMood();\n  }, []);\n\n  // Add a new mood\n  const addMood = async mood => {\n    try {\n      const response = await axios.post(\"http://localhost:5000\", mood);\n      setLatestMood(response.data); // Update the latest mood\n    } catch (error) {\n      console.error(\"Error adding mood:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoodForm, {\n      onAddMood: addMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), latestMood ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Latest Mood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Mood:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 24\n        }, this), \" \", latestMood.mood]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Suggestions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 24\n        }, this), \" \", latestMood.suggestions.join(\", \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No moods added yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/history\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"View Mood History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"Wn5g/QyvlYkPqDZOPdvw5aomNjU=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","Link","jsxDEV","_jsxDEV","Dashboard","_s","latestMood","setLatestMood","fetchLatestMood","response","get","data","length","error","console","addMood","mood","post","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddMood","suggestions","join","to","_c","$RefreshReg$"],"sources":["/home/navgurukul/Videos/Mood-App/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\n\nconst Dashboard = () => {\n    const [latestMood, setLatestMood] = useState(null);\n\n    // Fetch the latest mood from the backend\n    const fetchLatestMood = async () => {\n        try {\n            const response = await axios.get(\"http://localhost:5000\");\n            if (response.data.length > 0) {\n                setLatestMood(response.data[0]); // Assuming moods are sorted by creation date (latest first)\n            }\n        } catch (error) {\n            console.error(\"Error fetching latest mood:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchLatestMood();\n    }, []);\n\n    // Add a new mood\n    const addMood = async (mood) => {\n        try {\n            const response = await axios.post(\"http://localhost:5000\", mood);\n            setLatestMood(response.data); // Update the latest mood\n        } catch (error) {\n            console.error(\"Error adding mood:\", error);\n        }\n    };\n\n    return (\n        <div>\n            <h1>Dashboard</h1>\n            <MoodForm onAddMood={addMood} />\n            {latestMood ? (\n                <div>\n                    <h2>Latest Mood</h2>\n                    <p><strong>Mood:</strong> {latestMood.mood}</p>\n                    <p><strong>Suggestions:</strong> {latestMood.suggestions.join(\", \")}</p>\n                </div>\n            ) : (\n                <p>No moods added yet.</p>\n            )}\n            <Link to=\"/history\">\n                <button>View Mood History</button>\n            </Link>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}